classdef ForexPredictor3Labels < ForexPredictor
    properties ()
    %% Public methods:
    methods
        function fp = ForexPredictor3Labels(input_dbname, tableset_name, prediction_days)
            fp@ForexPredictor(input_dbname, tableset_name, prediction_days)
        end
        %% Choose the right inputs and targets to create x and y.
        function setupXY(obj, inputs_table_name, targets_table_name)
            fprintf('\nSetup XY...\n')
            limit = obj.training_limit;
            upper_t = obj.upper_threshold;
            lower_t = obj.lower_threshold;

            % Select n% threshold targets for buy signals.
            fields = {'signal', 'bids', 'asks', 'maxminclose', 'target'};
            [create_fields_text, fields_text] = ForexPredictor.combineFields(fields);
            
            filter = ForexPredictor.getInputsFilter();
            
            sql_create = strcat('CREATE TABLE IF NOT EXISTS', {' `'}, obj.tableset_name,'_',obj.y_table_name, '`(', create_fields_text, ', UNIQUE(time))');
            mksqlite(sql_create{1});
            sql = strcat('INSERT OR IGNORE INTO `',obj.tableset_name,'_',obj.y_table_name,'` ( ',fields_text,' ) ', ...
                ' SELECT y.time, 1 as signal, bids, asks, maxclose, uppertarget FROM `', ...
                obj.tableset_name,'_',targets_table_name,'` y, `',obj.tableset_name,'_',inputs_table_name,'` x', ...
                ' WHERE uppertarget >= ? AND x.time = y.time AND ', ...
                filter, ...
                ' ORDER BY y.time DESC LIMIT ?');
            mksqlite(sql, upper_t, limit);

            % Select n% threshold targets for sell signals.
            sql = strcat('INSERT OR IGNORE INTO `',obj.tableset_name,'_',obj.y_table_name,'` ( ',fields_text,' ) ', ...
                'SELECT y.time, 0 as signal, bids, asks, minclose, lowertarget FROM `', ...
                obj.tableset_name,'_',targets_table_name,'` y, `',obj.tableset_name,'_',inputs_table_name,'` x', ...
                ' WHERE lowertarget <= ? AND uppertarget < ? AND x.time = y.time AND', ...
                filter, ...
                ' ORDER BY y.time DESC LIMIT ?');
            mksqlite(sql, lower_t, upper_t, limit);
            
            % Select targets for hold signals.
            sql = strcat('INSERT OR IGNORE INTO `',obj.tableset_name,'_',obj.y_table_name,'` ( ',fields_text,' ) ', ...
                'SELECT time, 0 as signal, bids, asks, minclose, lowertarget FROM `', ...
                obj.tableset_name,'_',targets_table_name,'` y, `',obj.tableset_name,'_',inputs_table_name,'` x', ...
                ' WHERE lowertarget > ? AND uppertarget < ? AND x.time = y.time AND', ...
                filter, ...
                ' ORDER BY y.time DESC LIMIT ?');
            mksqlite(sql, lower_t, upper_t, limit);
            
            
            % Now create the x table
            sql = strcat('PRAGMA table_info(`',obj.tableset_name,'_',inputs_table_name,'`)');
            data = mksqlite(sql);
            fields = arrayfun(@(x) [x.name], data, 'UniformOutput', false);
            fields = fields(3:end);
            [create_fields_text, fields_text] = ForexPredictor.combineFields(fields);
            
            fields_text2 = strcat('`',obj.tableset_name,'_',inputs_table_name, '`.`time`, `',obj.tableset_name,'_',inputs_table_name, '`.`', fields{1}, '`');
            for i=2:size(fields,1)
                fields_text2 = strcat(fields_text2, ',`', obj.tableset_name,'_',inputs_table_name, '`.`', fields{i}, '`');
            end
            sql_create = strcat('CREATE TABLE IF NOT EXISTS', {' `'}, obj.tableset_name,'_',obj.x_table_name, '`(', create_fields_text, ', UNIQUE(time))');
            mksqlite(sql_create{1});
            sql = strcat('INSERT OR IGNORE INTO `',obj.tableset_name,'_',obj.x_table_name,'` ( ',fields_text,' ) ', ...
                'SELECT ',fields_text2,' FROM `', ...
                obj.tableset_name,'_',inputs_table_name,'`, `',obj.tableset_name,'_',obj.y_table_name,...
                '` WHERE `',obj.tableset_name,'_',inputs_table_name,'`.time = `',obj.tableset_name,'_',obj.y_table_name,'`.time ORDER BY `',obj.tableset_name,'_',obj.y_table_name,'`.id');
            mksqlite(sql);
        end
    end
    
    %% Private methods
    methods(Access=protected)
        %% Learning from current training data.
        % Data used are ones before given time.
        function [Theta1, Theta2, X, y, input_layer_size, num_labels, initial_nn_params] = learn(obj, time)
            if (nargin < 2)
                time = ForexPredictor.sqlite2unix('2114-01-13 00:00');
            end
            % Setup the parameters
            num_labels = 3;
            fprintf('\nLoading training data ...\n')
            last_training_time = time - (60*60*24*obj.prediction_days);
            sql = strcat('SELECT * FROM `', obj.tableset_name, '_',obj.x_table_name,'` WHERE time < ? ORDER BY time desc');
            data = mksqlite(sql, ForexPredictor.unix2sqlite(last_training_time));
            fields = fieldnames(data);
            caller = '';
            for i=3:size(fields,1)
                caller = [caller, ' x.', fields{i}];
            end
            caller = sprintf('cell2mat(arrayfun(@(x) [%s], data, ''UniformOutput'', false))', caller);
            X = eval(caller);

            input_layer_size  = size(fields,1) - 2;

            data = mksqlite(['SELECT signal FROM `', obj.tableset_name, '_',obj.y_table_name,'` WHERE time < ? ORDER BY time desc'], ForexPredictor.unix2sqlite(last_training_time));
            y = arrayfun(@(x) [x.signal], data);
            Xy = [X y];
            Xy = Xy(randperm(size(Xy,1)),:);
            X = Xy(:,1:end-1);
            y = Xy(:,end);
            
            initial_Theta1 = randInitializeWeights(input_layer_size, obj.hidden_layer_size);
            initial_Theta2 = randInitializeWeights(obj.hidden_layer_size, num_labels);

            initial_nn_params = [initial_Theta1(:) ; initial_Theta2(:)];

            fprintf('\nChecking Backpropagation... \n');

            %  Change the MaxIter to a larger
            %  value to see how more training helps.
            options = optimset('MaxIter', 100);

            % checkNNGradients(obj.lambda);

            fprintf('\nChecking Cost Function \n')

            % Create "short hand" for the cost function to be minimized
            costFunction = @(p) nnCostFunction(p, ...
                                               input_layer_size, ...
                                               obj.hidden_layer_size, ...
                                               num_labels, X, y, obj.lambda);

            % Now, costFunction is a function that takes in only one argument (the
            % neural network parameters)
            [nn_params, cost] = fmincg(costFunction, initial_nn_params, options);

            % Obtain Theta1 and Theta2 back from nn_params
            Theta1 = reshape(nn_params(1:obj.hidden_layer_size * (input_layer_size + 1)), ...
                             obj.hidden_layer_size, (input_layer_size + 1));

            Theta2 = reshape(nn_params((1 + (obj.hidden_layer_size * (input_layer_size + 1))):end), ...
                             num_labels, (obj.hidden_layer_size + 1));

            fprintf('Cost: %f ', cost);
            [signal, confidence] = predict(Theta1, Theta2, X);
            fprintf('\nTraining Set Accuracy: %f\n', mean(double(signal == y)) * 100);
        end
    end
    
end

